#+OPTIONS: num:nil toc:nil reveal_slide_number:"c/t" timestamp:nil
#+REVEAL_PLUGINS: (highlight zoom notes)
#+REVEAL_HLEVEL: 1
#+REVEAL_HIGHLIGHT_CSS: /Users/jeff/Documents/devtools/reveal.js-4.6.0/plugin/highlight/jeff.css
#+REVEAL_THEME: jeff
#+REVEAL_TRANS: slide
#+REVEAL_VERSION: 4
#+REVEAL_TITLE_SLIDE_BACKGROUND: ./beman_new_logo.png
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE: 200px
#+REVEAL_TITLE_SLIDE_BACKGROUND_POSITION: left
#+REVEAL_DEFAULT_SLIDE_BACKGROUND: ./beman_new_logo.png
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE: 100px
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_POSITION: left
#+Title: Introducing The Beman Project
#+Author: Jeff Garland
#+Email: jeff@crystalclearsoftware.com
#+date: 2024-06-24

#+BEGIN_NOTES
- 
- 
- dedicated to the beginning of Boost and our founder
#+END_NOTES
* 
#+BEGIN_QUOTE
It's the End of the World as We Know It (And I Feel Fine)

    - R.E.M. 1987
#+END_QUOTE

#+BEGIN_NOTES 
#+END_NOTES
* [[https://github.com/bemanproject][Introducing 'The Beman Project']]
#+BEGIN_QUOTE
The Beman Projectâ€™s mission is to support the efficient design and adoption of the highest quality C++ standard libraries through implementation experience, user feedback, and technical expertise.

  [[https://discourse.bemanproject.org/][discourse.bemanproject.org]]

#+END_QUOTE

#+BEGIN_NOTES
Founded at C++Now in 2024 the project strives to aggregate libraries proposed for ISO standardization making a simple usage experience for the C++ Community to try out new libraries. For library authors we assist by helping to make best modern development practices easy. Including CI, coverage, and packaging.
#+END_NOTES
** What's in a name?
- Named after Beman Dawes
- Boost co-founder
- Library developer extrodinare (filesystem, etc)
- WG21 Library Working group chair
- Mentor of many Boost developers
- Co-founder / funder of C++-Now
** What about Boost?
#+BEGIN_NOTES
The short version: the world that Boost was born in no longer exists. In addition, Boost is no longer the source of the majority of library proposals. WG21 and users have lost something big - a single place to go see c++ next libraries.  Boost cannot be molded into what we need for a variety of reasons. Beman is a new effort (sponsored by the Boost Foundation) to provide that one place to go - using the latest tooling and best practices. Boost libraries are welcome in Beman as are any proposed for standardization.

-Bring to bear the most modern tools: Cmake, reviews on github
#+END_NOTES
- Boost was started by WG21 members
- Over the lack of quality open-source C++ libraries
- For more than a decade Boost libraries drove ~std::~ additions
- Most of C++11 was in TR1 distribution from Boost
- By ~2018-202x most libraries from elsewhere
** Boost Impact on the C++ ecosystem
- One download you could try out future C++ libraries!
- The future came with:
  - useable documentation!
  - unit tests
  - cross-compiler testing
- Most importantly: *real community usage*
#+BEGIN_NOTES
- pop quiz: how many Range v3 users raised hands at cppcon in a room of 400+ people (less than 10)
- some libraries like fmt have lots of users -- we've still had at least 4 breaking defects
- we used to be like Rust and Python
#+END_NOTES
** 2024 Problem: Too many good c++ libraries!
- and they aren't in Boost
- but they are proposed for ~std::~  
- good luck testing the future!
- quality concerns with proposals
  - Godbolt doesn't have 'a distribution base'
  - or unit tests typically
- even TS's get questionable usage (wg21 is abandoning)
- real problem: no unified test and distribution platform
#+BEGIN_NOTES
- but Jeff, just get WG21 to reject these godbolt things
- why are you here -- just go post on the list
#+END_NOTES
* The Beman Project Details
#+BEGIN_NOTES
- A federation of libraries proposed for standardization
- Distribution   
- Frequent releases backed by automation
- Header names would track standard
- Namespace per c++ version ~beman::~
- Include paths <beman/<libname>/<header>.hpp  
#+END_NOTES
** What we want
#+BEGIN_SRC bash
git clone https://github.com/bemanproject/beman.git
$ cd beman
$ cmake -S . -B build
$ cmake --build build
$ ctest --test-dir build
#+END_SRC
- or, install from conan or vcpkg
- or, just one repo (all libs standalone!)
** What we want II
#+BEGIN_SRC c++
#include <beman/optional26/optional.hpp>
#include <iostream>
int main() {
    // Example from P3168R1: basic range loop over C++26 optional.

    beman::optional26::optional<int> opt{26};
    for (const auto& i : opt) {
        std::cout << "\"for each loop\" over C++26 optional: opt = " << i << "\n";
    }
}
#+END_SRC
- or, yes even [[https://godbolt.org/z/b5ThEqqhf][Godbolt]]
** [[https://github.com/bemanproject/beman/blob/main/docs/BEMAN_STANDARD.md][Core Principles]]
- Highest quality
- Production ready
- Industry standard technology
- Welcoming and inclusive community  
#+BEGIN_NOTES
- The best possible ~std::~ libs
  - good documentation
  - peer review outside wg21
  - real users
- Great community  
  - a project with diverse contributions
  - helpful and inviting
- Modern rapid tooling
- Stand-alone libraries
#+END_NOTES  
** How will it work?
- Outreach
  - Beman team will reach out to library authors
  - regular electronic meet-ups
- Independent implemenations!
  - sometimes non-paper authors will implement
- Non Beman repos
  - authors don't have to use Beman repos
** [[https://github.com/bemanproject/beman/blob/main/docs/FAQ.md][FAQ]]
- Do I need a paper before joining? - No
- Library not for the C++ standard? Can I add to Beman Project? - No
- Personal/work project no interest in becoming a standard library. Does the Beman Project have anything for me? - Yes
- Licensing: Apache with LLVM exception, Boost, MIT  
- Will libraries stay in Beman forever? - No (2 cycles)
- Is there are review process like Boost? - Authors can ask the community for review
** Value for Library Authors
- exposure and distribution
- testing resources
- expert community review and help
- best practices exposure
** Value for for C++ Community
- an independent impl of ~std::~ proposals
- back to one download
** Value for WG21
- return of a place to get experimental libs
- place to library integrate features
- a reconnection with the community
** [[https://github.com/bemanproject/beman/blob/main/docs/GOVERNANCE.md][Project Governence]]
- open community
- thanks Carbon!
- When community deadlocks: Jeff Garland, Inbal Levi, David Sankel
* What have we done so far?
** Tooling and Packaging
- CMake for portable builds
- Initial conan setup
- Continous Integration setup
- JSON library index
** Some Initial libraries
- [[https://github.com/eliaskosunen/scnlib][scnlib]] - proposed for c++26
  - Elias Kosunen allowed us to use as first example
- [[https://github.com/bemanproject/optional26][beman.optional26]]
  - Darius Neatu and Steve Downey
- [[https://github.com/dietmarkuehl/beman-execution][beman.execution]] (P2300)
  - Dietmar Kuhl
- Several more under discussion!    
* Thank you early contributors!
- All the C++Now Library in a Week participants!
  - first implementation: Frank Miller
  - Bret Brown, Richard Powell, Zach Laine, Louis Dionne, and so many others
  - Saksham Sharma: final logo design!
- And now
  - Dave Abrahams, Sean Parent, Robert Ramey, Peter Dimov
  - And Especially: Darius Neatu, Steve Downey, Dietmar Kuhl
- Come join us!
  - [[https://discourse.bemanproject.org/][discourse.bemanproject.org]]
  - Let's build the future together!
